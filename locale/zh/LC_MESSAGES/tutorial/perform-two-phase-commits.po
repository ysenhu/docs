#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: 2014-12-25 15:50+0800\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.9\n"

#: ../source/tutorial/perform-two-phase-commits.txt:3
msgid "Perform Two Phase Commits"
msgstr "执行两个阶段的提交"

#: ../source/tutorial/perform-two-phase-commits.txt:8
msgid "Synopsis"
msgstr "概要"

#: ../source/tutorial/perform-two-phase-commits.txt:10
msgid ""
"This document provides a pattern for doing multi-document updates or \"multi-"
"document transactions\" using a two-phase commit approach for writing data "
"to multiple documents. Additionally, you can extend this process to provide "
"a :ref:`rollback-like <2-phase-commits-rollback>` functionality."
msgstr ""
"这个文档为执行多文档操作或者说 \" 多文档事务 \" 提供一个模型，这个模型使用两"
"阶段提交方法把数据写到多个文档中。除此之外，你可以扩展这个过程以提供一个 :"
"ref:`rollback-like <2-phase-commits-rollback>` f功能。"

#: ../source/tutorial/perform-two-phase-commits.txt:17
msgid "Background"
msgstr "背景"

#: ../source/tutorial/perform-two-phase-commits.txt:19
msgid ""
"Operations on a single :term:`document` are always atomic with MongoDB "
"databases; however, operations that involve multiple documents, which are "
"often referred to as \"multi-document transactions\", are not atomic. Since "
"documents can be fairly complex and contain multiple \"nested\" documents, "
"single-document atomicity provides necessary support for many practical use "
"cases."
msgstr ""
"在MongoDB里一个 :term:`document` 上的操作总是原子的；然而，常常被称作  \"多文"
"档事务\" 的包含多个文档的操作并不是原子的。由于文档可能会相当复杂并且包含多"
"个 \"嵌套的\" 文档，单文档原子性为许多使用情况提供了必要的支持。"

#: ../source/tutorial/perform-two-phase-commits.txt:26
msgid ""
"Despite the power of single-document atomic operations, there are cases that "
"require multi-document transactions. When executing a transaction composed "
"of sequential operations, certain issues arise, such as:"
msgstr ""
"尽管当文档原子操作很强大，但是仍然有需要多文档事务的情况。当执行一个由连续操"
"作组成的事务时，某些问题出现了，比如："

#: ../source/tutorial/perform-two-phase-commits.txt:30
msgid ""
"Atomicity: if one operation fails, the previous operation within the "
"transaction must \"rollback\" to the previous state (i.e. the \"nothing,\" "
"in \"all or nothing\")."
msgstr ""
"原子性：如果一个操作失败，事务内的之前的操作必须 \" 回滚 \"到之前的状态（就"
"是 \"all or nothing\" 里面的 \"nothing\"）。"

#: ../source/tutorial/perform-two-phase-commits.txt:34
msgid ""
"Consistency: if a major failure (i.e. network, hardware) interrupts the "
"transaction, the database must be able to recover a consistent state."
msgstr ""
"一致性：如果一个严重的故障（比如网络或者硬件）打断了事务，数据库必须可以恢复"
"到一致的状态。"

#: ../source/tutorial/perform-two-phase-commits.txt:38
msgid ""
"For situations that require multi-document transactions, you can implement "
"two-phase commit in your application to provide support for these kinds of "
"multi-document updates. Using two-phase commit ensures that data is "
"consistent and, in case of an error, the state that preceded the transaction "
"is :ref:`recoverable <2-phase-commits-rollback>`. During the procedure, "
"however, documents can represent pending data and states."
msgstr ""
"对于需要多文档事务的情景，你可以在你的应用里实现两阶段提交以提供这些多文档更"
"新的支持。使用两阶段提交保证数据是一致的，并且在发生错误的情况下，执行事务之"
"前的状态是 :ref:`recoverable （可恢复的）<2-phase-commits-rollback>` 。然而，"
"在执行过程中，文档可以展示未确定的（事务提交之前的）数据和状态。"

#: ../source/tutorial/perform-two-phase-commits.txt:48
msgid ""
"Because only single-document operations are atomic with MongoDB, two-phase "
"commits can only offer transaction-*like* semantics. It is possible for "
"applications to return intermediate data at intermediate points during the "
"two-phase commit or rollback."
msgstr ""
"因为MongoDB数据库里仅仅单文档的操作是原子的，两阶段提交仅仅可以提供一个 *类似"
"* 事务的语义。对于应用来说在两阶段提交期间在中间点返回中间的数据或者回滚是有"
"可能的。"

#: ../source/tutorial/perform-two-phase-commits.txt:54
msgid "Pattern"
msgstr "模型"

#: ../source/tutorial/perform-two-phase-commits.txt:57
msgid "Overview"
msgstr "概述"

#: ../source/tutorial/perform-two-phase-commits.txt:59
msgid ""
"Consider a scenario where you want to transfer funds from account ``A`` to "
"account ``B``. In a relational database system, you can subtract the funds "
"from ``A`` and add the funds to ``B`` in a single multi-statement "
"transaction. In MongoDB, you can emulate a two-phase commit to achieve a "
"comparable result."
msgstr ""
"假设一个情景，你想从账户 ``A`` 转钱到账户 ``B`` 。在关系型数据库系统里，你可"
"以在一个多语句事务内从 ``A`` 账户上减去钱并且为 ``B`` 账户添加上钱。在MongoDB"
"里，你可以模仿两阶段提交以达到一个类似的结果。"

#: ../source/tutorial/perform-two-phase-commits.txt:65
msgid "The examples in this tutorial use the following two collections:"
msgstr "这个教程里的例子使用下面的两个集合："

#: ../source/tutorial/perform-two-phase-commits.txt:67
msgid "A collection named ``accounts`` to store account information."
msgstr "命名为 ``accounts`` 的集合存储账户信息。"

#: ../source/tutorial/perform-two-phase-commits.txt:69
msgid ""
"A collection named ``transactions`` to store information on the fund "
"transfer transactions."
msgstr "命名为 ``transactions`` 的集合存储有关转账事务的信息。"

#: ../source/tutorial/perform-two-phase-commits.txt:73
msgid "Initialize Source and Destination Accounts"
msgstr "初始化源账户和目的账户"

#: ../source/tutorial/perform-two-phase-commits.txt:75
msgid ""
"Insert into the ``accounts`` collection a document for account ``A`` and a "
"document for account ``B``."
msgstr "在  ``accounts`` 集合里分别为账户 ``A`` 和账户 ``B`` 插入一个文档。"

#: ../source/tutorial/perform-two-phase-commits.txt:87
msgid ""
"The operation returns a :method:`BulkWriteResult()` object with the status "
"of the operation. Upon successful insert, the :method:`BulkWriteResult()` "
"has :data:`~BulkWriteResult.nInserted` set to ``2`` ."
msgstr ""
"这个操作返回一个包含操作状态的 :method:`BulkWriteResult()` 对象。成功插入之"
"后， :method:`BulkWriteResult()` 的 :data:`~BulkWriteResult.nInserted` 字段设"
"置为 ``2`` 。"

#: ../source/tutorial/perform-two-phase-commits.txt:95
msgid "Initialize Transfer Record"
msgstr "初始化转账记录"

#: ../source/tutorial/perform-two-phase-commits.txt:97
msgid ""
"For each fund transfer to perform, insert into the ``transactions`` "
"collection a document with the transfer information. The document contains "
"the following fields:"
msgstr ""
"对于每一次转账的完成，往 ``transactions`` 集合里插入一条包含转账信息的文档。"
"这个文档包含如下字段："

#: ../source/tutorial/perform-two-phase-commits.txt:101
msgid ""
"``source`` and ``destination`` fields, which refer to the ``_id`` fields "
"from the ``accounts`` collection,"
msgstr ""
"``source`` 和 ``destination`` 字段，与 ``accounts`` 集合里的 ``_id`` 字段相关"
"联的。"

#: ../source/tutorial/perform-two-phase-commits.txt:104
msgid ""
"``value`` field, which specifies the amount of transfer affecting the "
"``balance`` of the ``source`` and ``destination`` accounts,"
msgstr ""
"``value`` 字段，指定影响 ``source`` 账户和 ``destination`` 账户 ``balance`` "
"的传输量，"

#: ../source/tutorial/perform-two-phase-commits.txt:107
msgid ""
"``state`` field, which reflects the current state of the transfer. The "
"``state`` field can have the value of ``initial``, ``pending``, ``applied``, "
"``done``, ``canceling``, and ``canceled``."
msgstr ""
"``state`` 字段，反应传输的当前状态。``state`` 字段可以具有值 ``initial`` ， "
"``pending`` ， ``applied`` ， ``done`` ， ``canceling`` 和 ``canceled`` 。"

#: ../source/tutorial/perform-two-phase-commits.txt:111
msgid "``lastModified`` field, which reflects last modification date."
msgstr "``lastModified`` 字段，反映了最后修改的日期。"

#: ../source/tutorial/perform-two-phase-commits.txt:113
msgid ""
"To initialize the transfer of ``100`` from account ``A`` to account ``B``, "
"insert into the ``transactions`` collection a document with the transfer "
"information, the transaction ``state`` of ``\"initial\"``, and the "
"``lastModified`` field set to the current date:"
msgstr ""
"想要初始化从账户 ``A`` 到账户 ``B`` 的 ``100`` 的转账，在 ``transactions`` 集"
"合里插入一个包含转账信息的文档，设置交易 ``state`` 为 ``\"initial\"``，并且 "
"``lastModified`` 字段设置为当前日期："

#: ../source/tutorial/perform-two-phase-commits.txt:124
msgid ""
"The operation returns a :method:`WriteResult()` object with the status of "
"the operation. Upon successful insert, the :method:`WriteResult()` object "
"has :data:`~WriteResult.nInserted` set to ``1``."
msgstr ""
"这个操作返回一个包含操作状态的 :method:`WriteResult()` 对象。成功插入后， :"
"method:`WriteResult()` 对象的 :data:`~WriteResult.nInserted` 被设置为 "
"``1``  。"

#: ../source/tutorial/perform-two-phase-commits.txt:129
msgid "Transfer Funds Between Accounts Using Two-Phase Commit"
msgstr "使用两阶段提交在账户之间转移资金"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:8
msgid "Retrieve the transaction to start."
msgstr "检索未开始的交易记录。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:11
msgid ""
"From the ``transactions`` collection, find a transaction in the ``initial`` "
"state. Currently the ``transactions`` collection has only one document, "
"namely the one added in the :ref:`initialize-transfer-record` step. If the "
"collection contains additional documents, the query will return any "
"transaction with an ``initial`` state unless you specify additional query "
"conditions."
msgstr ""
"在 ``transactions`` 集合里，查找处于 ``initial`` 状态的交易记录。目前 "
"``transactions`` 即合理仅仅有一个文档，即在 :ref:`initialize-transfer-"
"record` 一步中添加的那一个。如果集合中有更多的文档，除非你配置额外的查询条"
"件，否则这个查询将返回任何 ``initial`` 状态的交易记录。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:25
msgid ""
"Type the variable ``t`` in the :program:`mongo` shell to print the contents "
"of the variable. The operation should print a document similar to the "
"following except the ``lastModified`` field should reflect date of your "
"insert operation:"
msgstr ""
"在 :program:`mongo` 命令行中输入变量 ``t`` 以打印这个变量的内容。除了 "
"``lastModified`` 字段应该显示你插入操作的日期外，这个操作应该打印一个类似下面"
"的内容。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:47
msgid "Update transaction state to pending."
msgstr "更新交易记录状态为pending。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:50
msgid ""
"Set the transaction ``state`` from ``initial`` to ``pending`` and use the :"
"update:`$currentDate` operator to set the ``lastModified`` field to the "
"current date."
msgstr ""
"设置交易记录 ``state`` 从 ``initial`` 变更为 ``pending`` ，然后使用 :update:`"
"$currentDate` 操作符设置 ``lastModified`` 字段为当前日期。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:66
msgid ""
"The operation returns a :method:`WriteResult()` object with the status of "
"the operation. Upon successful update, the :data:`~WriteResult.nMatched` "
"and :data:`~WriteResult.nModified` displays ``1``."
msgstr ""
"这个操作返回一个包含操作状态的 :method:`WriteResult()` 对象。在成功更新后， :"
"data:`~WriteResult.nMatched` 和 :data:`~WriteResult.nModified` 显示为 "
"``1`` 。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:71
msgid ""
"In the update statement, the ``state: \"initial\"`` condition ensures that "
"no other process has already updated this record. If :data:`~WriteResult."
"nMatched` and :data:`~WriteResult.nModified` is ``0``, go back to the first "
"step to get a different transaction and restart the procedure."
msgstr ""
"在更新声明中， ``state: \"initial\"`` 条件保证没有其他的进程已经更新了这条记"
"录。如果 :data:`~WriteResult.nMatched` 和 :data:`~WriteResult.nModified` 是 "
"``0`` ，返回到第一步获取一个不同的交易记录并且重新开始这个过程。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:89
msgid "Apply the transaction to both accounts."
msgstr "把交易记录应用到两个账户。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:92
msgid ""
"Apply the transaction ``t`` to both accounts using the :method:`~db."
"collection.update()` method *if* the transaction has not been applied to the "
"accounts. In the update condition, include the condition "
"``pendingTransactions: { $ne: t._id }`` in order to avoid re-applying the "
"transaction if the step is run more than once."
msgstr ""
"*如果* 交易记录还没有应用到这些账户上，那么就使用 :method:`~db.collection."
"update()` 方法应用交易记录 ``t`` 到两个账户上。在更新条件中，要包含条件 "
"``pendingTransactions: { $ne: t._id }`` 以避免重复应用交易记录，如果不止一次"
"运行步骤。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:98
msgid ""
"To apply the transaction to the account, update both the ``balance`` field "
"and the ``pendingTransactions`` field."
msgstr ""
"想要应用交易记录到账户上，要更新 ``balance`` 字段和 ``pendingTransactions`` "
"字段。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:102
msgid ""
"Update the source account, subtracting from its ``balance`` the transaction "
"``value`` and adding to its ``pendingTransactions`` array the transaction "
"``_id``."
msgstr ""
"更新源账户，从它的 ``balance`` 中减去交易记录的 ``value`` ，并且把交易记录的 "
"``_id`` 添加到它的 ``pendingTransactions`` 数组。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:115
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:133
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:168
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:202
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:218
#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:252
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:25
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:129
msgid ""
"Upon successful update, the method returns a :method:`WriteResult()` object "
"with :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` set to "
"``1``."
msgstr ""
"在成功更新后，这个方法返回一个 :data:`~WriteResult.nMatched` 和 :data:"
"`~WriteResult.nModified` 值为 ``1`` 的 :method:`WriteResult()` 对象。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:120
msgid ""
"Update the destination account, adding to its ``balance`` the transaction "
"``value`` and adding to its ``pendingTransactions`` array the transaction "
"``_id`` ."
msgstr ""
"更新目的账户，为它的 ``balance`` 添加交易记录的 ``value`` ，并且把交易记录的 "
"``_id`` 添加到它的 ``pendingTransactions`` 数组。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:149
msgid "Update transaction state to applied."
msgstr "更新交易状态为 applied。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:152
msgid ""
"Use the following :method:`~db.collection.update()` operation to set the "
"transaction's ``state`` to ``applied`` and update the ``lastModified`` field:"
msgstr ""
"使用下面的 :method:`~db.collection.update()` 操作设置交易记录的 ``state`` 为 "
"``applied`` 并且更新 ``lastModified`` 字段："

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:184
msgid "Update both accounts' list of pending transactions."
msgstr "更新两个账户的挂起（pending）交易记录列表。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:187
msgid ""
"Remove the applied transaction ``_id`` from the ``pendingTransactions`` "
"array for both accounts."
msgstr ""
"从两个账户 ``pendingTransactions`` 数组中移除已经应用的交易记录 ``_id`` 。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:191
msgid "Update the source account."
msgstr "更新源账户。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:207
msgid "Update the destination account."
msgstr "更新目的账户。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:234
msgid "Update transaction state to done."
msgstr "更新交易记录状态为完成。"

#: ../source/includes/steps/perform-two-phase-commit-transaction.rst:237
msgid ""
"Complete the transaction by setting the ``state`` of the transaction to "
"``done`` and updating the ``lastModified`` field:"
msgstr ""
"设置交易记录的 ``state`` 为 ``done`` 并且更新  ``lastModified`` 字段，以完成"
"这笔交易。"

#: ../source/tutorial/perform-two-phase-commits.txt:136
msgid "Recovering from Failure Scenarios"
msgstr "从失败场景中恢复"

#: ../source/tutorial/perform-two-phase-commits.txt:138
msgid ""
"The most important part of the transaction procedure is not the prototypical "
"example above, but rather the possibility for recovering from the various "
"failure scenarios when transactions do not complete successfully. This "
"section presents an overview of possible failures and provides steps to "
"recover from these kinds of events."
msgstr ""
"事务过程最重要的一部分不是上面典型的例子，而是当事务没有成功完成的时候从各种"
"各样的失败场景中恢复的可能性。这一部分展现了可能的失败的概述并且提供从这些种"
"事件中恢复的步骤。"

#: ../source/tutorial/perform-two-phase-commits.txt:145
msgid "Recovery Operations"
msgstr "恢复操作"

#: ../source/tutorial/perform-two-phase-commits.txt:147
msgid ""
"The two-phase commit pattern allows applications running the sequence to "
"resume the transaction and arrive at a consistent state. Run the recovery "
"operations at application startup, and possibly at regular intervals, to "
"catch any unfinished transactions."
msgstr ""
"两阶段提交模式允许应用运行序列以恢复事务，并且达到一致的状态。在应用启动的时"
"候运行恢复操作，并且如果可能的话每隔一段时间，捕捉一些未完成的事务。"

#: ../source/tutorial/perform-two-phase-commits.txt:152
msgid ""
"The time required to reach a consistent state depends on how long the "
"application needs to recover each transaction."
msgstr "需要达到一致状态的时间取决于这个应用恢复每一个事务花费的时间。"

#: ../source/tutorial/perform-two-phase-commits.txt:155
msgid ""
"The following recovery procedures uses the ``lastModified`` date as an "
"indicator of whether the pending transaction requires recovery; "
"specifically, if the pending or applied transaction has not been updated in "
"the last 30 minutes, the procedures determine that these transactions "
"require recovery. You can use different conditions to make this "
"determination."
msgstr ""
"下面的恢复程序使用 ``lastModified`` 日期作为 pending 的事务是否需要恢复的标"
"识；特别地，如果 pending 或者 applied 事务在最后的30分钟内还没有被更新，程序"
"将判定这些事务需要恢复。你可以使用不同的条件来做这个判断。"

#: ../source/tutorial/perform-two-phase-commits.txt:163
#: ../source/tutorial/perform-two-phase-commits.txt:215
msgid "Transactions in Pending State"
msgstr "处于 Pending 状态的事务"

#: ../source/tutorial/perform-two-phase-commits.txt:165
msgid ""
"To recover from failures that occur after step \"`Update transaction state "
"to pending.`_\" but before \"`Update transaction state to applied.`_\"step, "
"retrieve from the ``transactions`` collection a pending transaction for "
"recovery:"
msgstr ""
"要想从 \"`Update transaction state to pending.`_\" 步骤之后 \"`Update "
"transaction state to applied.`_\" 步骤之前发生的错误恢复，请从 "
"``transactions`` 集合中检索出一个 pending 的事务来恢复："

#: ../source/tutorial/perform-two-phase-commits.txt:177
msgid "And resume from step \"`Apply the transaction to both accounts.`_\""
msgstr "从步骤 \"`Apply the transaction to both accounts.`_\" 重新开始执行"

#: ../source/tutorial/perform-two-phase-commits.txt:180
#: ../source/tutorial/perform-two-phase-commits.txt:207
msgid "Transactions in Applied State"
msgstr "处于 Applied 状态的事务"

#: ../source/tutorial/perform-two-phase-commits.txt:182
msgid ""
"To recover from failures that occur after step \"`Update transaction state "
"to applied.`_\" but before \"`Update transaction state to done.`_\"step, "
"retrieve from the ``transactions`` collection an applied transaction for "
"recovery:"
msgstr ""
"要想从 \"`Update transaction state to applied.`_\" 步骤之后 \"`Update "
"transaction state to done.`_\" 步骤之前发生的错误恢复，请从 ``transactions`` "
"集合中检索出一个 applied 的事务来恢复："

#: ../source/tutorial/perform-two-phase-commits.txt:194
msgid ""
"And resume from \"`Update both accounts' list of pending transactions.`_\""
msgstr ""
"从步骤  \"`Update both accounts' list of pending transactions.`_\"重新开始执"
"行"

#: ../source/tutorial/perform-two-phase-commits.txt:200
msgid "Rollback Operations"
msgstr "回滚操作"

#: ../source/tutorial/perform-two-phase-commits.txt:202
msgid ""
"In some cases, you may need to \"roll back\" or undo a transaction; e.g., if "
"the application needs to \"cancel\" the transaction or if one of the "
"accounts does not exist or stops existing during the transaction."
msgstr ""
"有时候，你需要 \"回滚\" 或者撤销一个事务；比如，应用需要 \"取消\" 事务或者其"
"中一个账户不存在或者交易过程中取消交易（感觉不太贴切，贴出原文：or if one "
"of the accounts does not exist or stops existing during the transaction.）。"

#: ../source/tutorial/perform-two-phase-commits.txt:209
msgid ""
"After the \"`Update transaction state to applied.`_\" step, you should "
"**not** roll back the transaction. Instead, complete that transaction and "
"create a new transaction to reverse the transaction by switching the values "
"in the source and the destination fields."
msgstr ""
"在 \"`Update transaction state to applied.`_\" 步骤之后，你 **不** 应该回滚事"
"务。取而代之地，完成那个事务并且创建一个新的事务并通过切换源字段和目的字段的"
"值来冲销交易记录。"

#: ../source/tutorial/perform-two-phase-commits.txt:217
msgid ""
"After the \"`Update transaction state to pending.`_\" step, but before the "
"\"`Update transaction state to applied.`_\" step, you can rollback the "
"transaction using the following procedure:"
msgstr ""
"在 \"`Update transaction state to pending.`_\" 步骤之后并且 \"`Update "
"transaction state to applied.`_\" 步骤之前，你可以使用下面的步骤回滚事务："

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:8
msgid "Update transaction state to canceling."
msgstr "更新交易记录状态为 canceling。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:11
msgid "Update the transaction ``state`` from ``pending`` to ``canceling``."
msgstr "更新交易记录的 ``state`` 字段从 ``pending`` 变为 ``canceling`` 。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:41
msgid "Undo the transaction on both accounts."
msgstr "撤销针对两个账户的交易。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:44
msgid ""
"To undo the transaction on both accounts, reverse the transaction ``t`` if "
"the transaction has been applied. In the update condition, include the "
"condition ``pendingTransactions: t._id`` in order to update the account only "
"if the pending transaction has been applied."
msgstr ""
"若要撤消对这两个帐户的交易，如果该交易已经应用了（applied），则反向交易 "
"``t`` 。在更新条件里，要包括条件 ``pendingTransactions: t._id`` ，这是为了仅"
"仅当挂起的（pending）交易完成（applied）以后才更新这个账户。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:50
msgid ""
"Update the destination account, subtracting from its ``balance`` the "
"transaction ``value`` and removing the transaction ``_id`` from the "
"``pendingTransactions`` array."
msgstr ""
"更新目标账户，从它的 ``balance`` 中减去交易 ``value`` 并且从 "
"``pendingTransactions`` 数组中移除交易 ``_id`` 。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:66
#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:91
msgid ""
"Upon successful update, the method returns a :method:`WriteResult()` object "
"with :data:`~WriteResult.nMatched` and :data:`~WriteResult.nModified` set to "
"``1``. If the pending transaction has not been previously applied to this "
"account, no document will match the update condition and :data:`~WriteResult."
"nMatched` and :data:`~WriteResult.nModified` will be ``0``."
msgstr ""
"成功更新后，这个方法返回一个包含被置为1的 :data:`~WriteResult.nMatched` 和 :"
"data:`~WriteResult.nModified` 的 :method:`WriteResult()` 对象。如果在这之前挂"
"起的交易还没有应用到这个账户上，将没有文档匹配这些更新条件并且 :data:"
"`~WriteResult.nMatched` 和 :data:`~WriteResult.nModified` 将被置为 ``0`` 。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:75
msgid ""
"Update the source account, adding to its ``balance`` the transaction "
"``value`` and removing the transaction ``_id`` from the "
"``pendingTransactions`` array."
msgstr ""
"更新源账户，给它的 ``balance`` 增加交易 ``value`` 并且从 "
"``pendingTransactions`` 数组中移除交易 ``_id`` 。"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:111
msgid "Update transaction state to canceled."
msgstr "更新交易状态为取消（canceled）"

#: ../source/includes/steps/perform-two-phase-commit-rollback.rst:114
msgid ""
"To finish the rollback, update the transaction ``state`` from ``canceling`` "
"to ``cancelled``."
msgstr ""
"要完成回滚，请把交易 ``state`` 从 ``canceling`` 更新为 ``cancelled`` 。"

#: ../source/tutorial/perform-two-phase-commits.txt:226
msgid "Multiple Applications"
msgstr "多个应用"

#: ../source/tutorial/perform-two-phase-commits.txt:228
msgid ""
"Transactions exist, in part, so that multiple applications can create and "
"run operations concurrently without causing data inconsistency or conflicts. "
"In our procedure, to update or retrieve the transaction document, the update "
"conditions include a condition on the ``state`` field to prevent "
"reapplication of the transaction by multiple applications."
msgstr ""
"存在部分交易，他们以便多个应用创建并且一致地运行操作，并且不会造成数据不一致"
"或者冲突。在我们的过程中，想要更新或者检索交易文档，更新条件则包含一个关于 "
"``state`` 字段的条件以避免被多个应用重复应用交易记录。"

#: ../source/tutorial/perform-two-phase-commits.txt:235
msgid ""
"For example, applications ``App1`` and ``App2`` both grab the same "
"transaction, which is in the ``initial`` state. ``App1`` applies the whole "
"transaction before ``App2`` starts. When ``App2`` attempts to perform the "
"\"`Update transaction state to pending.`_\" step, the update condition, "
"which includes the ``state: \"initial\"`` criterion, will not match any "
"document, and the :data:`~WriteResult.nMatched` and :data:`~WriteResult."
"nModified` will be ``0``. This should signal to ``App2`` to go back to the "
"first step to restart the procedure with a different transaction."
msgstr ""
"例如， ``App1`` 和 ``App2`` 都获取到了处于 ``initial`` 状态的同一交易记录。"
"在 ``App2`` 之前 ``App1`` 完成了整个交易。当 ``App2`` 试图执行 \"`Update "
"transaction state to pending.`_\" 步骤的时候，包含 ``state: \"initial\"`` 要"
"求的的更新条件将不会匹配到任何文档，并且 :data:`~WriteResult.nMatched` 和 :"
"data:`~WriteResult.nModified` 的值将是 ``0`` 。这是向 ``App2`` 发出一个信号："
"返回到第一步对不同的交易记录重新开始这个过程。"

#: ../source/tutorial/perform-two-phase-commits.txt:245
msgid ""
"When multiple applications are running, it is crucial that only one "
"application can handle a given transaction at any point in time. As such, in "
"addition including the expected state of the transaction in the update "
"condition, you can also create a marker in the transaction document itself "
"to identify the application that is handling the transaction. Use :method:"
"`~db.collection.findAndModify()` method to modify the transaction and get it "
"back in one step:"
msgstr ""
"当多个应用在运行的时候，在同一时间点仅仅一个应用可以处理某个给定的交易记录是"
"非常重要的。因此，除了在更新条件里包含交易记录的期许状态之外，你还可以在交易"
"记录文档自身中创建一个标记，它能够辨认正在操作这个交易记录文档的应用。使用 :"
"method:`~db.collection.findAndModify()` 方法在一步内修改交易记录并且获取此记"
"录。"

#: ../source/tutorial/perform-two-phase-commits.txt:267
msgid ""
"Amend the transaction operations to ensure that only applications that match "
"the identifier in the ``application`` field apply the transaction."
msgstr ""
"改进交易操作以保证仅仅与 ``application`` 字段中标识符相匹配的应用程序才能应用"
"该交易记录。"

#: ../source/tutorial/perform-two-phase-commits.txt:270
msgid ""
"If the application ``App1`` fails during transaction execution, you can use "
"the :ref:`recovery procedures <2-phase-commits-recovery>`, but applications "
"should ensure that they \"own\" the transaction before applying the "
"transaction. For example to find and resume the pending job, use a query "
"that resembles the following:"
msgstr ""
"如果在交易执行期间应用 ``App1`` 失败的话，你可以使用 :ref:`recovery "
"procedures <2-phase-commits-recovery>` ，但是，应用程序应该保证在它们应用该交"
"易之前 \"拥有\" 这个交易记录。例如查找并且继续挂起的工作，使用一个类似于下面"
"的查询："

#: ../source/tutorial/perform-two-phase-commits.txt:292
msgid "Using Two-Phase Commits in Production Applications"
msgstr "在生产应用中使用两阶段提交"

#: ../source/tutorial/perform-two-phase-commits.txt:294
msgid ""
"The example transaction above is intentionally simple. For example, it "
"assumes that it is always possible to roll back operations to an account and "
"that account balances can hold negative values."
msgstr ""
"上面的交易记录是有意的简单。例如，假设总是对一个账户进行回滚操作，账户余额有"
"可能为负值。"

#: ../source/tutorial/perform-two-phase-commits.txt:298
msgid ""
"Production implementations would likely be more complex. Typically, accounts "
"need information about current balance, pending credits, and pending debits."
msgstr ""
"生产实现可能会更复杂。通常情况下，账户需要当前余额，待定积分（pending "
"credit）和挂起的借方（pending debits）信息等。"

#: ../source/tutorial/perform-two-phase-commits.txt:302
msgid ""
"For all transactions, ensure that you use a level of :term:`write concern` "
"appropriate for your deployment."
msgstr ""
"对于所有的交易，确保为你的部署使用一个级别的合适的 :term:`write concern` 。"
